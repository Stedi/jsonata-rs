# For more examples and options, including how to ignore specific vulnerabilities,
# see https://google.github.io/osv-scanner/github-action/

name: OSV-Scanner

on:
  pull_request:
    branches: [ "main" ]
  merge_group:
    branches: [ "main" ]
  schedule:
    # Scan once a week
    - cron: '36 22 * * 2'
  push:
    branches: [ "main" ]

permissions:
  security-events: write
  contents: read

jobs:
  scan-scheduled:
    if: ${{ github.event_name == 'push' || github.event_name == 'schedule' }}
    uses: "google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@1f1242919d8a60496dd1874b24b62b2370ed4c78" # v1.7.1
    with:
      # -r:  
      # Recursively scan subdirectories
      # 
      # --call-analysis=all 
      # Check if the vulnerable code is actually being executed by your project. 
      # If the code is not being executed, these vulnerabilities will be marked as unexecuted.
      # 
      # --skip-git
      # Only look at the current code. Do not spend time looking through all commits
      scan-args: |-
        -r 
        --call-analysis=all
        --skip-git
        ./
  scan-pr:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}
    uses: "google/osv-scanner-action/.github/workflows/osv-scanner-reusable-pr.yml@1f1242919d8a60496dd1874b24b62b2370ed4c78" # v1.7.1
    with:
      # -r:  
      # Recursively scan subdirectories
      # 
      # --call-analysis=all 
      # Check if the vulnerable code is actually being executed by your project. 
      # If the code is not being executed, these vulnerabilities will be marked as unexecuted.
      # 
      # --skip-git
      # Only look at the current code. Do not spend time looking through all commits
      scan-args: |-
        -r
        --call-analysis=all
        --skip-git
        ./

